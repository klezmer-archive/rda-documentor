(ns rda-visualizer.server
  (:require [hiccup2.core :refer [html]]
            [org.httpkit.server :as httpkit]
            [rda-visualizer.util :refer [spy]])) 

(defn by-id [{[id] :params}]
  {:status 200
   :headers {"Content-Type" "text/html"}
   :body (str (html [:html {:lang "en"}
                     [:head
                      [:title "RDA Visualizer"]
                      [:link {:rel "stylesheet" :href "https://unpkg.com/sakura.css/css/sakura.css" :type "text/css"}]]
                     [:body
                      [:main
                       [:h1 "Hi there"]
                       [:p "here's some stuff: " id " yay"]]]]))})

(def routes {[:get #"/([a-zA-Z0-9]+)"] #'by-id})

(defn route
  "Given routes and a request, returns a response generated by a matching
   route, or a 404 if no match is found"
  [routes req]
  (if-let [[handler req'] (->> routes
                               (keep (fn [[[method pattern] handler]]
                                       (spy [method pattern handler])
                                       (when (and (= method (:request-method req))
                                                  (some? (re-matches pattern (:uri req))))
                                         ;; `rest` b/c the first group is always the whole match
                                         [handler (assoc req :params (rest (re-matches pattern (:uri req))))])))
                               first)]
    (handler req')
    {:status 404}))

(defn app [req]
  (route @#'routes req))

(defonce server (atom nil))

(defn start-server! []
  (when (nil? @server)
    (reset! server (httpkit/run-server #'app {:port 8000}))))

(defn stop-server! []
  (when-not (nil? @server)
    (@server :timeout 100)
    (reset! server nil)))

(comment
  (defonce log (atom []))
  (add-tap #(swap! log conj %))
  (reset! log [])
  (start-server!)
  (stop-server!)
  )